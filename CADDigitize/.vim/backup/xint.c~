#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <math.h>
#include <stdio.h>
#include <assert.h>

/*********************************************************/
/*                                                       */
/* SIMPLE X INTERFACE TO ENTER POINTS IN A WINDOW        */
/*                                                       */
/*   Mouse Button 1 : Add a Point                        */
/*   Key 'q' : quit                                      */
/*                                                       */
/*********************************************************/


/* Init Display Procedures */

void InitDisplay();

/* TreatEvent Procedures */

void TreatExpose();
void TreatButtonPress();
int  TreatKeyPress();

/* Other Procedures */

void Redraw();
void DrawVertices();

/* Global Variables */

#define CIRCSIZE    41
XPoint  FigCirc[CIRCSIZE] = {  {0,0},{-3,0},
                               {1,0},{1,0},{1,0},{1,0},{1,0},{1,0},
                               {-5,1},{1,0},{1,0},{1,0},{1,0},
                               {-4,1},{1,0},{1,0},{1,0},{1,0},
                               {-3,1},{1,0},{1,0},
                               {-4,-4},
                               {1,0},{1,0},{1,0},{1,0},{1,0},{1,0},
                               {-5,-1},{1,0},{1,0},{1,0},{1,0},
                               {-4,-1},{1,0},{1,0},{1,0},{1,0},
                               {-3,-1},{1,0},{1,0}
                            };
#define SQUASIZE    26
XPoint  FigSqua[SQUASIZE] = {  {0,0}, {3,3},
                               {0,-1},{0,-1},{0,-1},{0,-1},{0,-1},{0,-1},
                               {-1,0},{-1,0},{-1,0},{-1,0},{-1,0},{-1,0},
                               {0,1},{0,1},{0,1},{0,1},{0,1},{0,1},
                               {1,0},{1,0},{1,0},{1,0},{1,0},{1,0}
                            };
#define MAXPOINTS 10
XPoint  ipoint[MAXPOINTS];
int     length;

Window  mywindow;

GC      mygc;

/* Main Procedure */

main( argc, argv)
int argc;
char **argv[];
{
  Display *mydisplay;
  XEvent  myevent;
  int     done;

  mydisplay = XOpenDisplay("");
  InitDisplay( mydisplay, argc, argv);

  done = 0;
  length = 0;

  /* main event-reading loop */

  while(done == 0) {

    /* read the next event */

    XNextEvent(mydisplay,&myevent);

    switch(myevent.type) {

      /* rafraichissement du clavier */

      case MappingNotify:

        fprintf( stdout, "Mapping Notify\n");
        XRefreshKeyboardMapping( &myevent.xmapping);
        break;

      /* repaint window on expose event */

      case Expose:

        TreatExpose(myevent);
        break;

      case KeyPress:

        done = TreatKeyPress(myevent);
        break;

      case ButtonPress:    

        TreatButtonPress(myevent);
        break;
    }
  }

  XFreeGC(mydisplay,mygc);
  XCloseDisplay(mydisplay);

  exit(0);
}

void TreatExpose( myevent)
XEvent   myevent;
{
  fprintf( stdout, "Expose Event => Redraw the scene\n");

  if (myevent.xexpose.window == mywindow) {
    Redraw( myevent.xexpose.display,
            myevent.xexpose.window,
            mygc );
  }
}

void Redraw( d, w, gc)
Display* d;
Window w;
GC gc;
{

/* DRAW THE SQUARES */

  DrawVertices( d, w, gc, length, ipoint);

/* DRAW THE LINES */

  XDrawLines( d, w, gc, ipoint, length, CoordModeOrigin);
}

void TreatButtonPress( myevent)
XEvent myevent;
{
  if ( myevent.xbutton.window == mywindow ) {
    switch(myevent.xbutton.button) {
      case Button1:

        if (length < MAXPOINTS) {
          fprintf( stdout, "Point %5d, %5d selected\n",
            myevent.xbutton.x, myevent.xbutton.y);

            ipoint[length].x = myevent.xbutton.x;
            ipoint[length].y = myevent.xbutton.y;

/* DRAW THE SQUARE AND THE LINE BETWEEN THE TWO LAST POINTS */

            FigSqua[0] = ipoint[length];
            XDrawPoints( myevent.xbutton.display,
              myevent.xbutton.window,
              mygc,
              FigSqua, SQUASIZE,
              CoordModePrevious);
            if (length > 0) {
              XDrawLine( myevent.xbutton.display,
                myevent.xbutton.window,
                mygc,
                ipoint[length-1].x, ipoint[length-1].y,
                ipoint[length].x, ipoint[length].y);
            }
            length++;
          } else {
            fprintf( stdout, "Two Many Points\n");
          }
        break;

      case Button2:
        fprintf( stdout, "Button 2 pushed\n");
        break;
      case Button3:
        fprintf( stdout, "Button 3 pushed\n");
        break;
    }
  }
}

int TreatKeyPress( myevent)
XEvent myevent;
{
  KeySym    mykey;
  char text[10];
  int l;

  l=XLookupString(&myevent.xkey,text,10,&mykey,0);
  if (l==1) {
    fprintf( stdout, "Key pressed: %s\n", text);
    if ( myevent.xkey.window == mywindow ) {
        switch( text[0] ) {
        case 'q':
          fprintf( stdout, "Tchao\n");
          return(1);
        case 'c':
          XClearWindow( myevent.xkey.display,
                        myevent.xkey.window);
          Redraw( myevent.xkey.display, myevent.xkey.window, mygc);
          break;
      }
    }
  }
  return(0);
}

void DrawVertices( mydisplay,
                   mydrawable,
                   mygc,
                   l, p)
Display  *mydisplay;
Drawable mydrawable;
GC mygc;
int l;
XPoint* p;
{
  int  i;

  for (i=0; i<l; i++) {
    FigSqua[0] = p[i];
    XDrawPoints( mydisplay,
                 mydrawable,
                 mygc,
                 FigSqua, SQUASIZE,
                 CoordModePrevious);
  }
}

void InitDisplay( mydisplay, argc, argv)
Display *mydisplay;
int     argc;
char    *argv[];
{
  XSizeHints     myhint;

  int            myscreen;
  unsigned long  myforeground,
                 mybackground;

  myscreen = DefaultScreen(mydisplay);
  mybackground = WhitePixel(mydisplay,myscreen);
  myforeground = BlackPixel(mydisplay,myscreen);

  myhint.x = 200;
  myhint.y = 0;
  myhint.width = 800;
  myhint.height = 600;
  myhint.flags = PPosition | PSize;

  mywindow = XCreateSimpleWindow(mydisplay,
      DefaultRootWindow(mydisplay),
      myhint.x, myhint.y, myhint.width, myhint.height,
      5, myforeground, mybackground);

  XSetStandardProperties(mydisplay,mywindow,"solution","solution",
      None,argv,argc,&myhint);

  XSelectInput(mydisplay,mywindow,
      ButtonPressMask|KeyPressMask|ExposureMask);
  XMapRaised(mydisplay,mywindow);

  myhint.x = 200;
  myhint.y = 650;
  myhint.width = 800;
  myhint.height = 300;
  myhint.flags = PPosition | PSize;

  mygc = XCreateGC(mydisplay, mywindow,0,0);
  XSetBackground(mydisplay,mygc,mybackground);
  XSetForeground(mydisplay,mygc,myforeground);
}
