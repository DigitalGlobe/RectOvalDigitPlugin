from qgis.core import *
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from sextante.core.QGisLayers import QGisLayers

# "*args" allows this routine to accept any number of field values.
# the values are passed as a Python tuple, essentially a
# non-editable list
#
def concat(*args):

  # Initialize the return value to an empty string,
  # then set the separator character
  #
  retval = ""
  sep = " "

  # For each value passed in...
  #
  for t in args:
    # Convert to a string (this catches any numbers),
    # then remove leading and trailing blanks
    #

    s = str(t).strip()

    # Add the field value to the return value, using the separator
    # defined above
    #
    if s <> '':
      retval += sep + s

  # Strip of any leading separators before returning the value
  #
  return retval.lstrip(sep)

#Here we define the input and outputs
#====================================
##[Example scripts]=group
##input=vector
#output=output vector

vectorLayer = QGisLayers.getObjectFromUri(input)

provider = vectorLayer.dataProvider()
caps = vectorLayer.dataProvider().capabilities()

if caps & QgsVectorDataProvider.AddAttributes:
  res = vectorLayer.dataProvider().addAttributes( [ QgsField("PARCELLE", QVariant.String, "PARCELLE", 80)] )
rm_fields = [0, 1, 2]
if caps & QgsVectorDataProvider.DeleteAttributes:
  res = vectorLayer.dataProvider().deleteAttributes( rm_fields )
