# -*- coding: utf-8 -*-
# Import the PyQt and QGIS libraries
from PyQt4.QtCore import *
from PyQt4.QtGui import *
from qgis.core import *
from crea_mem_layer import Crea_couche
from qgis.utils import *
from algebre_vect_PyQGIS import *

def paires(list):
        # Itération par paires dans une liste
        for i in range(1, len(list)):
            yield list[i-1], list[i]

class Profile:

    def __init__(self, iface):
        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = iface.mapCanvas()

    def initGui(self):
        # Create action that will start plugin
        self.action = QAction(QIcon(":/plugins/"), "&Profile", self.iface.mainWindow())
        # connect the action to the run method
        QObject.connect(self.action, SIGNAL("activated()"), self.profile)

        # Add toolbar button and menu item
        self.iface.addPluginToMenu("Profile", self.action)


    def unload(self):
        # Remove the plugin menu item and icon
        self.iface.removePluginMenu("Profile",self.action)



    # run
    def profile(self):
        longueur = 50
        couche = self.iface.activeLayer()

        li = QgsVectorLayer("LineString", "Ligne", "memory")
        pr = li.dataProvider()

        for elem in couche.selectedFeatures():
            azimut = 90
            ligne = elem.geometry()
            for seg_start, seg_end in paires(ligne.asPolyline()):
                line_start = QgsPoint(seg_start)
                line_end = QgsPoint(seg_end)
                # cosinus directeurs de l'azimut
                az = line_start.azimuth(line_end)
                #QMessageBox.information(self.iface.mainWindow(), QCoreApplication.translate(str(az), str(az)), QCoreApplication.translate(str(az), str(az)))
                if az > 0:
                    azimut -= az
                elif az < 0:
                    azimut += az

                cosa, cosb = cosdir_azim(azimut)
                # point résultant
                resultat = QgsPoint(line_end.x()+(longueur*cosa), line_end.y()+(longueur*cosb))
                # création des couches point et ligne résultantes
                fet = QgsFeature()
                fet.setGeometry( QgsGeometry.fromPolyline([line_end, resultat]) )
                pr.addFeatures([fet])
                li.updateExtents()

        QgsMapLayerRegistry.instance().addMapLayers([li])
        return




if __name__ == "__main__":
    pass
